package com.ch4njun.spring;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import service.BoardService;
import vo.BoardVO;

@Controller
public class BoardController {
	private static final Logger logger = LoggerFactory.getLogger(BoardController.class);
	
	private BoardService boardService;
	public void setBoardService(BoardService boardService) {
		this.boardService = boardService;
	}
	
	@RequestMapping("boardView.do")
	public String boardHome(Integer page, HttpServletRequest request, Model model) {
		int now_page = 1;
		if(page != null)
			now_page = page;
		
		int max_page = boardService.boardCount() / util.pageData.BLOCKLIST + 1;
		
		int start = (now_page - 1) * util.pageData.BLOCKLIST + 1;
		int end = start + util.pageData.BLOCKLIST - 1;
		
		List<BoardVO> voList = boardService.selectList(start, end);
		
		model.addAttribute("now_page", now_page);
		model.addAttribute("max_page", max_page);
		model.addAttribute("voList", voList);
		
		return "board/boardView";
	}
	
	@RequestMapping("contentView.do")
	public String contentView(HttpSession session, Integer idx, Model model) {
		if(boardService.upHit(idx) != 1) {
			model.addAttribute("message", "잘못된 접근입니다.");
			model.addAttribute("location", "boardView.do");
			
			return "result";
		}
		
		BoardVO vo = boardService.selectOne(idx);
		
		if(session.getAttribute("login_id") == null) {
			model.addAttribute("message", "로그인후 이용해주세요.");
			model.addAttribute("location", "boardView.do");
			
			return "result";
		}
		
		int self = 0;
		if(session.getAttribute("login_id").equals(vo.getId()))
			self = 1;
		
		model.addAttribute("vo", vo);
		model.addAttribute("self", self);

		return "board/contentView";
	}
	
	@RequestMapping("writeView.do")
	public String WriteView() {
		return "board/writeView";
	}
	
	@RequestMapping("writeLogic.do")
	public String WriteLogic(HttpServletRequest request, HttpSession session, Model model) {
		BoardVO vo = new BoardVO();
		
		vo.setId((String)session.getAttribute("login_id"));
		vo.setContext(request.getParameter("context").replace("\r\n", "<br>"));
		vo.setTitle(request.getParameter("title"));
		vo.setWrite_pw(request.getParameter("pw"));
		

		int result = boardService.insertBoard(vo);

		if(result == 1) 
			model.addAttribute("message", "게시글 작성에 성공하였습니다!");
		else 
			model.addAttribute("message", "게시글 작성에 실패하였습니다!");
		
		model.addAttribute("location", "boardView.do");
		return "result";
	}
	
	@RequestMapping("deleteLogic.do")
	public String DeleteLogic(int idx, Model model) {
		if(boardService.selectOne(idx) == null) {
			model.addAttribute("message", "잘못된 접근입니다.");
		}else {
			if(boardService.deleteBoard(idx) != 1) 
				model.addAttribute("message", "삭제에 실패하였습니다!");
			else 
				model.addAttribute("message", "삭제가 완료되었습니다!.");
		}
		
		model.addAttribute("location", "boardView.do");
		return "result";
	}
	
	@RequestMapping("updateView.do")
	public String UpdateView(int idx, Model model) {
		BoardVO vo = boardService.selectOne(idx);
		if(vo == null) {
			model.addAttribute("message", "잘못된 접근입니다.");
			model.addAttribute("location", "boardView.do");
			
			return "result";
		}
		
		vo.setContext(vo.getContext().replace("<br>", "\r\n"));
		model.addAttribute("vo", vo);
		
		return "board/updateView";
	}
	
	@RequestMapping("updateLogic.do")
	public String UpdateLogic(Model model, HttpServletRequest request) {
		BoardVO vo = new BoardVO();
		vo.setIdx(Integer.parseInt(request.getParameter("idx")));
		vo.setTitle(request.getParameter("title"));
		vo.setContext(request.getParameter("context").replace("\r\n", "<br>"));
		
		int result = boardService.updateBoard(vo);
		
		
		
		
		
	}
}
